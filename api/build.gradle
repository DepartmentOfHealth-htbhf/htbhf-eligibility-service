buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.google.guava:guava:27.0.1-jre" // to fix an issue exposed by spotbugs 2.0.0: https://github.com/spotbugs/spotbugs-gradle-plugin/issues/120
    }
    ext {
        jacksonDataformatVersion = '2.10.0'
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id "org.owasp.dependencycheck" version "4.0.0.1"
    id "com.github.spotbugs" version "2.0.0"
    id 'pmd'
    id 'checkstyle'
}
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
    }
}

lombok {
    version = '1.18.4'
    sha256 = ""
}

group = 'uk.gov.dhsc.htbhf'
sourceCompatibility = 1.11

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "uk.gov.dhsc.htbhf:htbhf-common-rest:latest.release"
    implementation "uk.gov.dhsc.htbhf:htbhf-common-logging:latest.release"
    implementation "io.springfox:springfox-swagger2:${springFoxVersion}"
    implementation "io.springfox:springfox-bean-validators:${springFoxVersion}"
    // Need to upgrade the version of Guava to address Snyk vulnerability found in SpringFox.
    // https://app.snyk.io/vuln/SNYK-JAVA-COMGOOGLEGUAVA-32236
    implementation "com.google.guava:guava:27.0.1-jre"
    implementation "io.micrometer:micrometer-registry-prometheus:1.1.4"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.mockito:mockito-junit-jupiter:2.23.4"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDataformatVersion}"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner:2.1.1.RELEASE"
    testImplementation "uk.gov.dhsc.htbhf:htbhf-common-test:latest.release"

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.9.0'
}

test {
    useJUnitPlatform()
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}
tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    toolVersion "8.15"
}

pmdMain {
    ignoreFailures = false
    ruleSetFiles = files("../config/pmd/rulesets.xml")
    ruleSets = [] // Remove built-in rule sets
}
pmdTest {
    ignoreFailures = false
    ruleSetFiles = files("../config/pmd/test-rulesets.xml")
    ruleSets = [] // Remove built-in rule sets
}
spotbugsTest {
    excludeFilter = file("../config/spotbugs/test-exclude.xml")
}

task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    classpath += sourceSets.main.runtimeClasspath
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = true
}
